<?php
/**
 * Created by PhpStorm.
 * User: ocastro
 * Date: 2/22/17
 * Time: 2:02 AM
 */

class   Homebase_Autopart_Block_Topmenu extends Mage_Page_Block_Html_Topmenu{

    private $_helper;

    protected $_subCatCollection;

    protected $_subCatLimit = 40;

    protected $_googleImpression;

    public function _construct()
    {
        parent::_construct(); // TODO: Change the autogenerated stub
        $this->_helper = Mage::helper('hautopart');
        $this->setCacheLifetime(null);
    }

    public function getHtml($outermostClass = '', $childrenWrapClass = '')
    {
        Mage::dispatchEvent('page_block_html_topmenu_gethtml_before', array(
            'menu' => $this->_menu,
            'block' => $this
        ));
        $storeCode = Mage::app()->getStore()->getCode();
        $_partcategory = $this->getLayout()->createBlock('hautopart/partcategory');

        $attribute = Mage::getModel('eav/entity_attribute')->loadByCode(Mage_Catalog_Model_Product::ENTITY, 'auto_make');

        $attribute_values = Mage::getResourceModel('eav/entity_attribute_option_collection')
            ->setAttributeFilter($attribute->getId())
            ->setStoreFilter($storeCode,false);
        $html = '';
        foreach($attribute_values as $value){
            if($value->getOptionId() != 422){

                $html.='<li class="menu-full-width no-child"><a href="' . $this->_helper->getMakePath($value->getValue()) . '"><span>' . $value->getValue() . '</span></a></li>';
            }
        }
        $html.= '<li class="menu-full-width with-child"><a href="#">Browse by Model</a>';
        $html.= $_partcategory->toHtml();
        $html.='</li>';

//        $this->_menu->setOutermostClass($outermostClass);
//        $this->_menu->setChildrenWrapClass($childrenWrapClass);


//        if ($renderer = $this->getChild('catalog.topnav.renderer')) {
//            $renderer->setMenuTree($this->_menu)->setChildrenWrapClass($childrenWrapClass);
//            $html = $renderer->toHtml();
//        } else {
//            $html = $this->_getHtml($this->_menu, $childrenWrapClass);
//        }

        Mage::dispatchEvent('page_block_html_topmenu_gethtml_after', array(
            'menu' => $this->_menu,
            'html' => $html
        ));

        return $html;
    }

    /**
     * @return array|mixed
     * @throws Zend_Cache_Exception
     */
    public function getSubmenuItems()
    {

        $storeId = Mage::app()->getStore()->getId();
        $cacheId = 'topmenu_subcat_collection_' . $storeId;
        $moparPerformanceCategoryId = 368;
        $moparCategoryId = 434;
        $exteriorCategoryId = 369;
        $interiorCategoryId = 374;
        $maintenanceId = 435;
        $wheelAccessoriesId = 370;
        $cargoAccessoriesId = 437;
        $tuneUpMaintenancePart = 435;

        if (($data_to_be_cached = Mage::app()->getCache()->load($cacheId))) {
           $this->_subCatCollection = unserialize($data_to_be_cached);

        } else {

            $collection = Mage::getModel('catalog/product')->getCollection()
                ->addAttributeToSelect(array('auto_type', 'part_name'))
                ->addStoreFilter()
                ->addAttributeToFilter("status", Mage_Catalog_Model_Product_Status::STATUS_ENABLED)
                ->addAttributeToFilter('auto_type', array('in' => array($moparCategoryId, $exteriorCategoryId, $interiorCategoryId,$maintenanceId,$moparPerformanceCategoryId, $wheelAccessoriesId, $cargoAccessoriesId, $tuneUpMaintenancePart)));

            $catArray = array();
            foreach ($collection as $product) {
                $autoType = explode(',', $product->getAutoType());

                if (empty($product->getPartName())) {
                    continue;
                }

                if (in_array($moparPerformanceCategoryId, $autoType)) {
                    $catArray[$moparPerformanceCategoryId][$product->getPartName()] = $product->getPartName();
                }

                if (in_array($moparCategoryId, $autoType)) {
                    $catArray[$moparCategoryId][$product->getPartName()] = $product->getPartName();
                }

                if (in_array($exteriorCategoryId, $autoType)) {
                    $catArray[$exteriorCategoryId][$product->getPartName()] = $product->getPartName();
                }

                if (in_array($interiorCategoryId, $autoType)) {
                    $catArray[$interiorCategoryId][$product->getPartName()] = $product->getPartName();
                }

                if (in_array($maintenanceId, $autoType)) {
                    $catArray[$maintenanceId][$product->getPartName()] = $product->getPartName();
                }

                if (in_array($wheelAccessoriesId, $autoType)) {
                    $catArray[$wheelAccessoriesId][$product->getPartName()] = $product->getPartName();
                }

                if (in_array($cargoAccessoriesId, $autoType)) {
                    $catArray[$cargoAccessoriesId][$product->getPartName()] = $product->getPartName();
                }

                if (in_array($tuneUpMaintenancePart, $autoType)) {
                    $catArray[$tuneUpMaintenancePart][$product->getPartName()] = $product->getPartName();
                }

            }

            sort($catArray[$moparPerformanceCategoryId]);
            sort($catArray[$moparCategoryId]);
            sort($catArray[$interiorCategoryId]);
            sort($catArray[$exteriorCategoryId]);
            sort($catArray[$maintenanceId]);
            sort($catArray[$wheelAccessoriesId]);
            sort($catArray[$cargoAccessoriesId]);
            sort($catArray[$tuneUpMaintenancePart]);

            $catArray[$moparPerformanceCategoryId]    = array_slice($catArray[$moparPerformanceCategoryId], 0, $this->getSubCatLimit());
            $catArray[$moparCategoryId]    = array_slice($catArray[$moparCategoryId], 0, $this->getSubCatLimit());
            $catArray[$interiorCategoryId] = array_slice($catArray[$interiorCategoryId], 0, $this->getSubCatLimit());
            $catArray[$exteriorCategoryId] = array_slice($catArray[$exteriorCategoryId], 0, $this->getSubCatLimit());
            $catArray[$maintenanceId] = array_slice($catArray[$maintenanceId], 0, $this->getSubCatLimit());
            $catArray[$wheelAccessoriesId] = array_slice($catArray[$wheelAccessoriesId], 0, $this->getSubCatLimit());
            $catArray[$cargoAccessoriesId] = array_slice($catArray[$cargoAccessoriesId], 0, $this->getSubCatLimit());
            $catArray[$tuneUpMaintenancePart] = array_slice($catArray[$tuneUpMaintenancePart], 0, $this->getSubCatLimit());

            $this->_subCatCollection = $catArray;

            Mage::app()->getCache()->save(serialize($this->_subCatCollection), $cacheId, array(), (60 * 60) * 24 );
        }

        return $this->_subCatCollection;
    }

    /**
     * @return array|mixed
     * @throws Mage_Core_Model_Store_Exception
     * @throws Zend_Cache_Exception
     */
    public function dynamicTopNav()
    {

        $storeId = Mage::app()->getStore()->getId();
        $cacheId = 'topmenu_subcat_collection_dynamic' . $storeId;

        if (($data_to_be_cached = Mage::app()->getCache()->load($cacheId))) {
            $catArray = unserialize($data_to_be_cached);

        } else {

            $categoryArray = array(368, 434, 369, 374, 435, 435, 371, 392, 400, 401);
            $catArray = array();
            $urlHelper = Mage::helper('hautopart');
            $collection = Mage::getModel('catalog/product')->getCollection()
                ->addAttributeToSelect(array('auto_type', 'part_name'))
                ->addStoreFilter()
                ->addAttributeToFilter("status", Mage_Catalog_Model_Product_Status::STATUS_ENABLED)
                ->addAttributeToFilter('auto_type', array('in' => $categoryArray));

            $googleImpression = $this->_getGoogleImpression();
            foreach ($collection as $product) {

                $autoType = explode(',', $product->getAutoType());
                $partName = $product->getPartName();

                if (empty($product->getPartName())) {
                    continue;
                }

                foreach ($categoryArray as $categoryId){
                    if (in_array($categoryId, $autoType)) {
                        $partNameUrl = $urlHelper->scrubLabel(strtolower($partName));

                        $clicks =  isset($googleImpression[$categoryId][$partNameUrl]) ? $googleImpression[$categoryId][$partNameUrl] : 0;
                        $catArray[$categoryId][$partNameUrl] = array(
                            'url' => $partNameUrl,
                            'label' => $partName,
                            'clicks' =>  $clicks
                        );
                        $this->_array_sort_by_column($catArray[$categoryId], 'clicks', 3);
                        $catArray[$categoryId] = array_slice($catArray[$categoryId], 0, 20);
                        $this->_array_sort_by_column($catArray[$categoryId], 'url', 4);
                    }
                }

                Mage::app()->getCache()->save(serialize($catArray), $cacheId, array(), (60 * 60) * 24 );
            }
        }

        return $catArray;
    }

    public function _array_sort_by_column(&$arr, $col, $dir = SORT_DESC) {
        $sort_col = array();
        foreach ($arr as $key=> $row) {
            $sort_col[$key] = $row[$col];
        }

        array_multisort($sort_col, $dir, $arr);
    }


    protected function _getGoogleImpression()
    {
        $resource = Mage::getSingleton('core/resource');
        $readConnection = $resource->getConnection('core_read');

        $query = "SELECT * FROM google_impression_data";
        $results = $readConnection->fetchAll($query);

        if(!empty($results)){
            foreach ($results as $row){
                $this->_googleImpression[$row['category']][$row['part_name']] = $row['clicks'];
            }
        }

        return $this->_googleImpression;
    }

    /**
     * Get model per website
     * @return array|mixed
     * @throws Mage_Core_Exception
     * @throws Zend_Cache_Exception
     */
    public function getBrowseModel()
    {
        $browseModel = array();
        $website_id = (int) Mage::app()->getWebsite()->getId();
        $cacheId = "top_menu_cache_{$website_id}";

        if (($data_to_be_cached = Mage::app()->getCache()->load($cacheId))) {
            $browseModel = unserialize($data_to_be_cached);
        } else {
            $_helper = Mage::helper('hauto/path');
            $baseUrl = Mage::getBaseUrl();
            $resource = Mage::getSingleton('core/resource');
            $readConnection = $resource->getConnection('core_read');
            $query = "SELECT auto.make, auto.model, eav1.value as make_label, eav2.value as model_label FROM auto_combination auto LEFT JOIN eav_attribute_option_value as eav1 ON eav1.option_id = auto.make AND eav1.store_id = 0 LEFT JOIN eav_attribute_option_value as eav2 ON
                    eav2.option_id = auto.model AND eav2.store_id = 0  WHERE auto.store_id = {$website_id} group by auto.model order by make_label ASC, model_label ASC ";
            $results = $readConnection->fetchAll($query);
            if(!empty($results)){
                foreach ($results as $row){
                    $makeText = $_helper->filterTextToUrl($row['make_label']);
                    $modelText = $_helper->filterTextToUrl($row['model_label']);
                    $browseModel[$row['make_label']][$row['model_label']] = array(
                        'make' => $row['make_label'],
                        'make_url' => "{$baseUrl}make/{$makeText}.html",
                        'model' => $row['model_label'] == '1500' ? '1500 DS' : $row['model_label'],
                        'model_url' => "{$baseUrl}model/{$makeText}-{$modelText}.html"
                    );
                }
            }
            Mage::app()->getCache()->save(serialize($browseModel), $cacheId, array(), (60 * 60) * 24 );
        }

        return $browseModel;
    }

    public function getSubCatLimit()
    {
        return $this->_subCatLimit;
    }
}